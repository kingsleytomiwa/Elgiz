generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String             @id @default(cuid())
  email         String?            @unique
  password      String?
  name          String?
  image         String?
  suspended     Boolean            @default(false)
  position      Position
  hotelId       String?
  sections      Category[]
  color         String?
  accounts      Account[]
  sessions      Session[]
  history       StatusChange[]
  notifications UserNotification[]
  requests      Request[]
  hotel         Hotel?             @relation("userHotel", fields: [hotelId], references: [id])
  spaPositions  SpaPosition[]      @relation("SpaPositionToUser")

  @@map("users")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Hotel {
  id                        String              @id @default(cuid())
  name                      String?
  email                     String?
  phone                     String?
  address                   String?
  city                      String?
  country                   String?
  responsiblePersonName     String?
  responsiblePersonPosition String?
  guestsAmount              Int?
  previousPayment           DateTime?
  nextPayment               DateTime?
  deleted                   Boolean?            @default(false)
  suspended                 Boolean?            @default(false)
  settings                  Json?
  rooms                     Int?                @default(0)
  paypalSubscriptionId      String?
  autoRenewal               Boolean?            @default(false)
  adminNotifications        AdminNotification[]
  modules                   Module[]
  notifications             Notification[]
  parameters                Parameter[]
  reviews                   Review[]
  subModules                SubModule[]
  userNotifications         UserNotification[]
  foodCategories            FoodCategory[]
  foodPositions             FoodPosition[]
  guests                    Guest[]
  messages                  Message[]
  payments                  Payment[]
  requests                  Request[]
  shopCategories            ShopCategory[]
  shopPositions             ShopPosition[]
  spaPositions              SpaPosition[]
  staff                     User[]              @relation("userHotel")

  @@map("hotels")
}

model Parameter {
  id              String               @id @default(cuid())
  hotelId         String
  type            ParameterType
  routes          String[]
  isDeliveryFree  Boolean?             @default(true)
  deliveryValue   Float?               @default(0)
  deliveryType    DeliveryPaymentType? @default(FIXED)
  cashPayment     Boolean?             @default(true)
  cardPayment     Boolean?             @default(true)
  checkoutPayment Boolean?             @default(true)
  spaClosingTime  DateTime?
  spaOpeningTime  DateTime?
  hotel           Hotel                @relation(fields: [hotelId], references: [id])
}

model Review {
  id        String    @id @default(cuid())
  guestId   String
  hotelId   String
  text      String
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  guest     Guest     @relation(fields: [guestId], references: [id])
  hotel     Hotel     @relation(fields: [hotelId], references: [id])
}

model Notification {
  id                String             @id @default(cuid())
  hotelId           String
  createdAt         DateTime?          @default(now()) @db.Timestamptz(6)
  type              NotificationType?
  data              Json?
  guestId           String?
  section           Category?
  guest             Guest?             @relation(fields: [guestId], references: [id])
  hotel             Hotel              @relation(fields: [hotelId], references: [id])
  userNotifications UserNotification[]
}

model UserNotification {
  id             String       @id @default(cuid())
  notificationId String
  hotelId        String
  guestId        String?
  userId         String
  createdAt      DateTime?    @default(now()) @db.Timestamptz(6)
  wasRead        Boolean      @default(false)
  wasRemoved     Boolean      @default(false)
  data           Json?
  guest          Guest?       @relation(fields: [guestId], references: [id])
  hotel          Hotel        @relation(fields: [hotelId], references: [id])
  notification   Notification @relation(fields: [notificationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model AdminNotification {
  id         String                 @id @default(cuid())
  hotelId    String
  createdAt  DateTime?              @default(now()) @db.Timestamptz(6)
  wasRead    Boolean                @default(false)
  wasRemoved Boolean                @default(false)
  data       Json?
  type       AdminNotificationType?
  paymentId  String?
  hotel      Hotel                  @relation(fields: [hotelId], references: [id])
  payment    Payment?               @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model Module {
  id         String      @id @default(cuid())
  title      String
  value      Boolean
  index      Int
  hotelId    String
  name       String
  hotel      Hotel       @relation(fields: [hotelId], references: [id])
  subModules SubModule[]
}

model SubModule {
  id       String   @id @default(cuid())
  title    String
  value    Boolean
  moduleId String
  hotelId  String?
  hidden   Boolean? @default(false)
  name     String
  hotel    Hotel?   @relation(fields: [hotelId], references: [id])
  module   Module   @relation(fields: [moduleId], references: [id])
}

model Payment {
  id                 String              @id @default(cuid())
  hotelId            String
  startDate          DateTime            @default(now()) @db.Timestamptz(6)
  endDate            DateTime?
  createdAt          DateTime?           @default(now()) @db.Timestamptz(6)
  amount             Float
  extras             String[]
  isPaid             Boolean             @default(false)
  period             Int
  receipt            String?
  rooms              Int
  type               TransactionType     @default(PAYPAL)
  paypalOrderId      String?
  adminNotifications AdminNotification[]
  hotel              Hotel               @relation(fields: [hotelId], references: [id])

  @@map("payments")
}

model Guest {
  id                 String             @id @default(cuid())
  hotelId            String
  name               String
  email              String
  phone              String
  room               String
  code               String             @unique
  startDate          DateTime
  endDate            DateTime
  createdAt          DateTime?          @default(now()) @db.Timestamptz(6)
  suspended          Boolean?           @default(false)
  pushToken          String?            @unique
  wasSplashDisplayed Boolean?           @default(false)
  notifications      Notification[]
  reviews            Review[]
  userNotifications  UserNotification[]
  hotel              Hotel              @relation(fields: [hotelId], references: [id])
  messages           Message[]
  requests           Request[]

  @@map("guests")
}

model Request {
  id           String         @id @default(cuid())
  hotelId      String
  guestId      String
  section      Category
  type         RequestType
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  data         Json?
  status       RequestStatus
  workerId     String?
  positionId   String?
  reserveEnd   DateTime?
  reserveStart DateTime?
  isPaid       Boolean?
  numericalId  Int            @default(autoincrement())
  completedAt  DateTime?      @db.Timestamptz(6)
  history      StatusChange[]
  guest        Guest          @relation(fields: [guestId], references: [id])
  hotel        Hotel          @relation(fields: [hotelId], references: [id])
  worker       User?          @relation(fields: [workerId], references: [id])

  @@map("requests")
}

model StatusChange {
  id        String        @id @default(cuid())
  status    RequestStatus
  changedAt DateTime      @default(now()) @db.Timestamptz(6)
  staffId   String?
  requestId String
  request   Request       @relation(fields: [requestId], references: [id], onDelete: Cascade)
  staff     User?         @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([requestId, status])
}

model Message {
  id        String    @id @default(cuid())
  guestId   String
  text      String
  wasRead   Boolean   @default(false)
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  hotelId   String
  senderId  String
  guest     Guest     @relation(fields: [guestId], references: [id])
  hotel     Hotel     @relation(fields: [hotelId], references: [id])

  @@map("messages")
}

model FoodCategory {
  id            String         @id @default(cuid())
  hotelId       String
  index         Int
  name          Json
  hotel         Hotel          @relation(fields: [hotelId], references: [id])
  foodPositions FoodPosition[]

  @@map("foodCategories")
}

model FoodPosition {
  id          String       @id @default(cuid())
  hotelId     String
  name        Json
  description Json
  imageURL    String
  weight      Int
  price       Float
  categoryId  String
  category    FoodCategory @relation(fields: [categoryId], references: [id])
  hotel       Hotel        @relation(fields: [hotelId], references: [id])

  @@map("foodPositions")
}

model ShopPosition {
  id          String       @id @default(cuid())
  hotelId     String
  name        Json
  description Json
  categoryId  String
  imageURL    String
  price       Float
  category    ShopCategory @relation(fields: [categoryId], references: [id])
  hotel       Hotel        @relation(fields: [hotelId], references: [id])

  @@map("shopPositions")
}

model ShopCategory {
  id            String         @id @default(cuid())
  hotelId       String
  index         Int            @default(autoincrement())
  name          Json
  hotel         Hotel          @relation(fields: [hotelId], references: [id])
  shopPositions ShopPosition[]

  @@map("shopCategories")
}

model SpaPosition {
  id          String   @id @default(cuid())
  hotelId     String
  name        Json
  description Json
  imageURL    String
  duration    Int
  price       Float
  guestsLimit Int?     @default(1)
  noWorkers   Boolean? @default(false)
  hotel       Hotel    @relation(fields: [hotelId], references: [id])
  staff       User[]   @relation("SpaPositionToUser")

  @@map("spaPositions")
}

enum ParameterType {
  RECEPTION
  SHOP
  RESTAURANT
  SPA
}

enum AdminNotificationType {
  PAYMENT
  ROOMS_QUANTITY_CHANGE_REQUEST
  PAYMENT_RECEIPT
  PAYMENT_METHOD_CHANGE_REQUEST
}

enum NotificationType {
  HOTEL_REQUEST_CREATED
}

enum TransactionType {
  PAYPAL
  BANK_TRANSFER
}

enum DeliveryPaymentType {
  FIXED
  PERCENTAGE
}

enum Category {
  RESTAURANT
  ROOM_SERVICE
  SPA
  RECEPTION
  SHOP
  CHAT

  @@map("RequestCategory")
}

enum Position {
  ADMIN
  OWNER
  STAFF
}

enum RequestType {
  FOOD_ORDER
  WASH_DISHES
  PREPARE_SAUNA
  OPEN_PARKING
  TAXI
  SHOP
  ADDITIONAL_SERVICES
  IRONING
  BRING_DISHES
  LEAVE_REVIEW
  STAFF_HELP
  CLEANING
}

enum RequestStatus {
  CREATED
  ACCEPTED
  COMPLETED
  REJECTED
  WITHDRAWN
}
